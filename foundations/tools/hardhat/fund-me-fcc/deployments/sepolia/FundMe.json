{
  "address": "0x9187087912e8c56B5C40577eC3407874730D8215",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23e2bc065f8354f199edcbcc2da590acd515b8a1ceb73b42a4b6ce1b3288b86b",
  "receipt": {
    "to": null,
    "from": "0xcd7559AAB753f89e17d50b38712e1043bbbACCCa",
    "contractAddress": "0x9187087912e8c56B5C40577eC3407874730D8215",
    "transactionIndex": 3,
    "gasUsed": "1058527",
    "logsBloom": "0x
    "blockHash": "0x56355f3a544245896ebe71341ad5562995728b927b90d0a44e937a1d76c6b05c",
    "transactionHash": "0x23e2bc065f8354f199edcbcc2da590acd515b8a1ceb73b42a4b6ce1b3288b86b",
    "logs": [],
    "blockNumber": 7845631,
    "cumulativeGasUsed": "3524581",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "1d8584fb180954359699bc52df01d736",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// 1. Pragma\\r\\npragma solidity ^0.8.7;\\r\\n// 2. Imports\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// 3. Interfaces, Libraries, Contracts\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/**@title A sample Funding Contract\\r\\n * @author Patrick Collins\\r\\n * @notice This contract is for creating a sample funding contract\\r\\n * @dev This implements price feeds as our library\\r\\n */\\r\\ncontract FundMe {\\r\\n    // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State variables\\r\\n    uint256 public constant MINIMUM_USD = 5 * 10**18;\\r\\n    address private immutable i_owner;\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    // Events (we have none!)\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner);\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions Order:\\r\\n    //// constructor\\r\\n    //// receive\\r\\n    //// fallback\\r\\n    //// external\\r\\n    //// public\\r\\n    //// internal\\r\\n    //// private\\r\\n    //// view / pure\\r\\n\\r\\n    constructor(address priceFeed) {\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\r\\n        i_owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Funds our contract based on the ETH/USD price\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You need to spend more ETH!\\\"\\r\\n        );\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n        s_funders.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // Transfer vs call vs Send\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        // mappings can't be in memory, sorry!\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /** @notice Gets the amount that an address has funded\\r\\n     *  @param fundingAddress the address of the funder\\r\\n     *  @return the amount funded\\r\\n     */\\r\\n    function getAddressToAmountFunded(address fundingAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_addressToAmountFunded[fundingAddress];\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (uint256) {\\r\\n        return s_priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7e1c9be2e0c4ec0ed202df49755eb852b5f1ba6103c119565df9d25a866bf6c4\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n  function getPrice(AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n    // ETH/USD rate in 18 digit\\r\\n    return uint256(answer * 10000000000);\\r\\n  }\\r\\n\\r\\n  // 1000000000\\r\\n  // call it get fiatConversionRate, since it assumes something about decimals\\r\\n  // It wouldn't work for every aggregator\\r\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 ethPrice = getPrice(priceFeed);\\r\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\r\\n    return ethAmountInUsd;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x5f6ddca5a6edf82500513cdcfe2a4c4c06b37cbe8affdb489ec5342eef4d253e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001352380380620013528339818101604052810190620000379190620000cd565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c6111c56200018d600039600081816102db0152818161046e015281816105130152818161069d015261089301526111c56000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c146101ac57610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b5c565b6101e9565b6040516100bf9190610d3c565b60405180910390f35b3480156100d457600080fd5b506100dd610232565b6040516100ea9190610d3c565b60405180910390f35b3480156100ff57600080fd5b506101086102d9565b005b34801561011657600080fd5b5061011f610503565b60405161012c9190610d3c565b60405180910390f35b34801561014157600080fd5b5061014a61050f565b6040516101579190610ce6565b60405180910390f35b34801561016c57600080fd5b50610175610537565b6040516101829190610d01565b60405180910390f35b610193610561565b005b3480156101a157600080fd5b506101aa61069b565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610b89565b610929565b6040516101e09190610ce6565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561029c57600080fd5b505afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610bb6565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600080549050811015610409576000808281548110610383576103826110a4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040190610ffd565b915050610361565b50600067ffffffffffffffff811115610425576104246110d3565b5b6040519080825280602002602001820160405280156104535781602001602082028036833780820191505090505b5060009080519060200190610469929190610a4c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104b090610cd1565b60006040518083038185875af1925050503d80600081146104ed576040519150601f19603f3d011682016040523d82523d6000602084013e6104f2565b606091505b505090508061050057600080fd5b50565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b674563918244f4000061059f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461097090919063ffffffff16565b10156105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610d1c565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461062f9190610d73565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610720576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107a357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610759575b5050505050905060005b815181101561082e5760008282815181106107cb576107ca6110a4565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061082690610ffd565b9150506107ad565b50600067ffffffffffffffff81111561084a576108496110d3565b5b6040519080825280602002602001820160405280156108785781602001602082028036833780820191505090505b506000908051906020019061088e929190610a4c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108d590610cd1565b60006040518083038185875af1925050503d8060008114610912576040519150601f19603f3d011682016040523d82523d6000602084013e610917565b606091505b505090508061092557600080fd5b5050565b600080828154811061093e5761093d6110a4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061097c836109ac565b90506000670de0b6b3a764000085836109959190610f11565b61099f9190610dc9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190610be3565b5050509150506402540be40081610a449190610dfa565b915050919050565b828054828255906000526020600020908101928215610ac5579160200282015b82811115610ac45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a6c565b5b509050610ad29190610ad6565b5090565b5b80821115610aef576000816000905550600101610ad7565b5090565b600081359050610b0281611133565b92915050565b600081519050610b178161114a565b92915050565b600081359050610b2c81611161565b92915050565b600081519050610b4181611161565b92915050565b600081519050610b5681611178565b92915050565b600060208284031215610b7257610b71611102565b5b6000610b8084828501610af3565b91505092915050565b600060208284031215610b9f57610b9e611102565b5b6000610bad84828501610b1d565b91505092915050565b600060208284031215610bcc57610bcb611102565b5b6000610bda84828501610b32565b91505092915050565b600080600080600060a08688031215610bff57610bfe611102565b5b6000610c0d88828901610b47565b9550506020610c1e88828901610b08565b9450506040610c2f88828901610b32565b9350506060610c4088828901610b32565b9250506080610c5188828901610b47565b9150509295509295909350565b610c6781610f6b565b82525050565b610c7681610fc7565b82525050565b6000610c89601b83610d62565b9150610c9482611107565b602082019050919050565b6000610cac600083610d57565b9150610cb782611130565b600082019050919050565b610ccb81610fa7565b82525050565b6000610cdc82610c9f565b9150819050919050565b6000602082019050610cfb6000830184610c5e565b92915050565b6000602082019050610d166000830184610c6d565b92915050565b60006020820190508181036000830152610d3581610c7c565b9050919050565b6000602082019050610d516000830184610cc2565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d7e82610fa7565b9150610d8983610fa7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dbe57610dbd611046565b5b828201905092915050565b6000610dd482610fa7565b9150610ddf83610fa7565b925082610def57610dee611075565b5b828204905092915050565b6000610e0582610f7d565b9150610e1083610f7d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e4f57610e4e611046565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e8c57610e8b611046565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ec957610ec8611046565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f0657610f05611046565b5b828202905092915050565b6000610f1c82610fa7565b9150610f2783610fa7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f6057610f5f611046565b5b828202905092915050565b6000610f7682610f87565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fd282610fd9565b9050919050565b6000610fe482610feb565b9050919050565b6000610ff682610f87565b9050919050565b600061100882610fa7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561103b5761103a611046565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61113c81610f6b565b811461114757600080fd5b50565b61115381610f7d565b811461115e57600080fd5b50565b61116a81610fa7565b811461117557600080fd5b50565b61118181610fb1565b811461118c57600080fd5b5056fea2646970667358221220a0aea7e73863dca0e2d3d5e891f8ee457016824537438268657f81a289cf89b564736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c146101ac57610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b5c565b6101e9565b6040516100bf9190610d3c565b60405180910390f35b3480156100d457600080fd5b506100dd610232565b6040516100ea9190610d3c565b60405180910390f35b3480156100ff57600080fd5b506101086102d9565b005b34801561011657600080fd5b5061011f610503565b60405161012c9190610d3c565b60405180910390f35b34801561014157600080fd5b5061014a61050f565b6040516101579190610ce6565b60405180910390f35b34801561016c57600080fd5b50610175610537565b6040516101829190610d01565b60405180910390f35b610193610561565b005b3480156101a157600080fd5b506101aa61069b565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610b89565b610929565b6040516101e09190610ce6565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561029c57600080fd5b505afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610bb6565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600080549050811015610409576000808281548110610383576103826110a4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040190610ffd565b915050610361565b50600067ffffffffffffffff811115610425576104246110d3565b5b6040519080825280602002602001820160405280156104535781602001602082028036833780820191505090505b5060009080519060200190610469929190610a4c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104b090610cd1565b60006040518083038185875af1925050503d80600081146104ed576040519150601f19603f3d011682016040523d82523d6000602084013e6104f2565b606091505b505090508061050057600080fd5b50565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b674563918244f4000061059f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461097090919063ffffffff16565b10156105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610d1c565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461062f9190610d73565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610720576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107a357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610759575b5050505050905060005b815181101561082e5760008282815181106107cb576107ca6110a4565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061082690610ffd565b9150506107ad565b50600067ffffffffffffffff81111561084a576108496110d3565b5b6040519080825280602002602001820160405280156108785781602001602082028036833780820191505090505b506000908051906020019061088e929190610a4c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108d590610cd1565b60006040518083038185875af1925050503d8060008114610912576040519150601f19603f3d011682016040523d82523d6000602084013e610917565b606091505b505090508061092557600080fd5b5050565b600080828154811061093e5761093d6110a4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061097c836109ac565b90506000670de0b6b3a764000085836109959190610f11565b61099f9190610dc9565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190610be3565b5050509150506402540be40081610a449190610dfa565b915050919050565b828054828255906000526020600020908101928215610ac5579160200282015b82811115610ac45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a6c565b5b509050610ad29190610ad6565b5090565b5b80821115610aef576000816000905550600101610ad7565b5090565b600081359050610b0281611133565b92915050565b600081519050610b178161114a565b92915050565b600081359050610b2c81611161565b92915050565b600081519050610b4181611161565b92915050565b600081519050610b5681611178565b92915050565b600060208284031215610b7257610b71611102565b5b6000610b8084828501610af3565b91505092915050565b600060208284031215610b9f57610b9e611102565b5b6000610bad84828501610b1d565b91505092915050565b600060208284031215610bcc57610bcb611102565b5b6000610bda84828501610b32565b91505092915050565b600080600080600060a08688031215610bff57610bfe611102565b5b6000610c0d88828901610b47565b9550506020610c1e88828901610b08565b9450506040610c2f88828901610b32565b9350506060610c4088828901610b32565b9250506080610c5188828901610b47565b9150509295509295909350565b610c6781610f6b565b82525050565b610c7681610fc7565b82525050565b6000610c89601b83610d62565b9150610c9482611107565b602082019050919050565b6000610cac600083610d57565b9150610cb782611130565b600082019050919050565b610ccb81610fa7565b82525050565b6000610cdc82610c9f565b9150819050919050565b6000602082019050610cfb6000830184610c5e565b92915050565b6000602082019050610d166000830184610c6d565b92915050565b60006020820190508181036000830152610d3581610c7c565b9050919050565b6000602082019050610d516000830184610cc2565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d7e82610fa7565b9150610d8983610fa7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dbe57610dbd611046565b5b828201905092915050565b6000610dd482610fa7565b9150610ddf83610fa7565b925082610def57610dee611075565b5b828204905092915050565b6000610e0582610f7d565b9150610e1083610f7d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e4f57610e4e611046565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e8c57610e8b611046565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ec957610ec8611046565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f0657610f05611046565b5b828202905092915050565b6000610f1c82610fa7565b9150610f2783610fa7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f6057610f5f611046565b5b828202905092915050565b6000610f7682610f87565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fd282610fd9565b9050919050565b6000610fe482610feb565b9050919050565b6000610ff682610f87565b9050919050565b600061100882610fa7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561103b5761103a611046565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61113c81610f6b565b811461114757600080fd5b50565b61115381610f7d565b811461115e57600080fd5b50565b61116a81610fa7565b811461117557600080fd5b50565b61118181610fb1565b811461118c57600080fd5b5056fea2646970667358221220a0aea7e73863dca0e2d3d5e891f8ee457016824537438268657f81a289cf89b564736f6c63430008070033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 332,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 336,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 339,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)104"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)104": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}